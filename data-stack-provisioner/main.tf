module "elasticache" {
  for_each = local.config.elasticache

  source                       = "git::https://github.com/jaseel123/terraform-modules/elasticache.git?ref=initial-version"
  name                         = "${terraform.workspace}-${each.key}"
  create_cluster               = lookup(each.value, "create_cluster", false)
  create_replication_group     = lookup(each.value, "create_replication_group", true)
  create_serverless            = lookup(each.value, "create_serverless", false)
  engine                       = lookup(each.value, "engine", null)
  engine_version               = lookup(each.value, "engine_version", null)
  apply_immediately            = lookup(each.value, "apply_immediately", null)
  custom_port                  = lookup(each.value, "custom_port", null)
  auto_minor_version_upgrade   = lookup(each.value, "auto_minor_version_upgrade", false)
  availability_zone            = lookup(each.value, "availability_zone", null)
  cluster_id                   = lookup(each.value, "cluster_id", "")
  final_snapshot_identifier    = lookup(each.value, "final_snapshot_identifier", null)
  ip_discovery                 = lookup(each.value, "ip_discovery", null)
  maintenance_window           = lookup(each.value, "maintenance_window", null)
  network_type                 = lookup(each.value, "network_type", null)
  node_type                    = lookup(each.value, "node_type", null)
  num_cache_nodes              = lookup(each.value, "num_cache_nodes", 1)
  preferred_availability_zones = lookup(each.value, "preferred_availability_zones", [])
  replication_group_id         = lookup(each.value, "replication_group_id", null)
  security_group_ids           = lookup(each.value, "security_group_ids", [])
  snapshot_retention_limit     = lookup(each.value, "snapshot_retention_limit", 7)
  snapshot_window              = lookup(each.value, "snapshot_window", null)
  cluster_mode_enabled         = lookup(each.value, "cluster_mode_enabled", false)
  num_node_groups              = lookup(each.value, "num_node_groups", null)
  at_rest_encryption_enabled   = lookup(each.value, "at_rest_encryption_enabled", true)
  multi_az_enabled             = lookup(each.value, "multi_az_enabled", false)
  description                  = lookup(each.value, "description", null)
  kms_key_arn                  = lookup(each.value, "kms_key_arn", null)
  num_cache_clusters           = lookup(each.value, "num_cache_clusters", null)
  replicas_per_node_group      = lookup(each.value, "replicas_per_node_group", null)
  automatic_failover_enabled   = lookup(each.value, "automatic_failover_enabled", null)
  security_group_names         = lookup(each.value, "security_group_names", null)
  user_group_ids               = lookup(each.value, "user_group_ids", null)
  create_parameter_group       = lookup(each.value, "create_parameter_group", true)
  parameter_group_family       = lookup(each.value, "parameter_group_family", "")
  parameter_group_name         = lookup(each.value, "parameter_group_name", null)
  parameters                   = lookup(each.value, "parameters", [])
  subnet_group_name            = lookup(each.value, "subnet_group_name", null)
  create_subnet_group          = lookup(each.value, "create_subnet_group", true)
  subnet_ids                   = lookup(each.value, "subnet_ids", [])
  cache_usage_limits           = lookup(each.value, "cache_usage_limits", null)
  snapshot_arns_to_restore     = lookup(each.value, "snapshot_arns_to_restore", [])
  default_user                 = lookup(each.value, "default_user", [])
  tags                         = merge(local.config.tags, lookup(each.value, "tags", {}))
}


module "msk" {
  for_each = local.config.msk

  source                                 = "git::https://github.com/jaseel123/terraform-modules/msk.git?ref=initial-version"
  cluster_name                           = "${terraform.workspace}-${each.key}"
  enable_custom_config                   = lookup(each.value, "enable_custom_config", false)
  config_description                     = lookup(each.value, "config_description", "")
  kafka_version                          = lookup(each.value, "kafka_version", "")
  config_properties                      = lookup(each.value, "config_properties", "")
  number_of_broker_nodes                 = lookup(each.value, "number_of_broker_nodes", null)
  broker_node_instance_type              = lookup(each.value, "broker_node_instance_type", "")
  broker_node_security_groups            = lookup(each.value, "broker_node_security_groups", [])
  broker_node_subnets                    = lookup(each.value, "broker_node_subnets", [])
  broker_node_connectivity_info          = lookup(each.value, "broker_node_connectivity_info", {})
  broker_node_storage_info               = lookup(each.value, "broker_node_storage_info", {})
  timeouts                               = lookup(each.value, "timeouts", {})
  client_authentication                  = lookup(each.value, "client_authentication", {})
  storage_mode                           = lookup(each.value, "storage_mode", null)
  kms_key_arn                            = lookup(each.value, "kms_key_arn", "")
  client_broker_comm_encryption          = lookup(each.value, "client_broker_comm_encryption", true)
  internal_broker_comm_encryption        = lookup(each.value, "internal_broker_comm_encryption", true)
  broker_node_az_distribution            = lookup(each.value, "broker_node_az_distribution", "DEFAULT")
  enhanced_monitoring                    = lookup(each.value, "enhanced_monitoring", "DEFAULT")
  cloudwatch_logs_enabled                = lookup(each.value, "cloudwatch_logs_enabled", false)
  cloudwatch_log_group_retention_in_days = lookup(each.value, "cloudwatch_log_group_retention_in_days", 7)
  cloudwatch_log_group                   = lookup(each.value, "cloudwatch_log_group", "")
  firehose_logs_enabled                  = lookup(each.value, "firehose_logs_enabled", false)
  firehose_delivery_stream               = lookup(each.value, "firehose_delivery_stream", "")
  s3_logs_enabled                        = lookup(each.value, "s3_logs_enabled", false)
  s3_logs_bucket                         = lookup(each.value, "s3_logs_bucket", "")
  s3_logs_prefix                         = lookup(each.value, "s3_logs_prefix", "")
  jmx_exporter_enabled                   = lookup(each.value, "jmx_exporter_enabled", false)
  node_exporter_enabled                  = lookup(each.value, "node_exporter_enabled", false)
  enable_resource_based_policy           = lookup(each.value, "enable_resource_based_policy", false)
  cluster_source_policy_documents        = lookup(each.value, "cluster_source_policy_documents", {})
  cluster_override_policy_documents      = lookup(each.value, "cluster_override_policy_documents", {})
  cluster_policy_statements              = lookup(each.value, "cluster_policy_statements", {})
  tags                                   = merge(local.config.tags, lookup(each.value, "tags", {}))
}

module "rds" {
  for_each = local.config.rds

  source                                 = "git::https://github.com/jaseel123/terraform-modules/rds.git?ref=initial-version"
  rds_name                               = each.key
  apply_immediately                      = lookup(each.value, "apply_immediately", false)
  vault_path                             = each.value.vault_path
  db_parameter_group_name                = lookup(each.value, "db_parameter_group_name", null)
  subnets                                = lookup(each.value, "subnets", [])
  vpc_id                                 = each.value.vpc_id
  identifier                             = "${terraform.workspace}-${each.key}"
  subnet_group_name                      = each.value.subnet_group_name
  parametr_group_family                  = lookup(each.value, "parametr_group_family", "mysql8.0")
  parameters                             = lookup(each.value, "parameters", [])
  create_read_replica                    = lookup(each.value, "create_read_replica", false)
  option_group_engine                    = lookup(each.value, "option_group_engine", "")
  engine                                 = lookup(each.value, "engine", "mysql")
  option_group_engine_version            = lookup(each.value, "option_group_engine_version", "8.0")
  engine_version                         = lookup(each.value, "engine_version", "8.0.35")
  instance_type                          = lookup(each.value, "instance_type", "db.m5.large")
  replica_instance_type                  = lookup(each.value, "replica_instance_type", "db.m5.large")
  encryption_at_rest                     = lookup(each.value, "encryption_at_rest", true)
  kms_key_id                             = lookup(each.value, "kms_key_id", "")
  config_groups                          = lookup(each.value, "config_groups", true)
  parameter_group_name                   = lookup(each.value, "parameter_group_name", "${terraform.workspace}-${each.key}")
  option_group_name                      = lookup(each.value, "option_group_name", "${terraform.workspace}-${each.key}")
  options                                = lookup(each.value, "options", [])
  db_option_group_tags                   = merge(local.config.tags, lookup(each.value, "tags", {}))
  db_parameter_group_tags                = merge(local.config.tags, lookup(each.value, "tags", {}))
  db_subnet_group_tags                   = merge(local.config.tags, lookup(each.value, "tags", {}))
  maintenance_window                     = lookup(each.value, "maintenance_window", "wed:21:00-wed:22:00")
  backup_retention_window                = lookup(each.value, "backup_retention_window", 7)
  backup_window                          = lookup(each.value, "backup_window", "04:00-05:00")
  security_group_ids                     = lookup(each.value, "security_group_ids", [])
  replica_security_group_ids             = lookup(each.value, "replica_security_group_ids", [])
  storage_size                           = lookup(each.value, "storage_size", 100)
  storage_type                           = lookup(each.value, "storage_type", "gp2")
  username                               = lookup(each.value, "username", "admin")
  rds_password_length                    = lookup(each.value, "rds_password_length", 16)
  allow_major_version_upgrade            = lookup(each.value, "allow_major_version_upgrade", false)
  auto_minor_version_upgrade             = lookup(each.value, "auto_minor_version_upgrade", false)
  performance_insights_enabled           = lookup(each.value, "performance_insights_enabled", false)
  performance_insights_retention_period  = lookup(each.value, "performance_insights_retention_period", 7)
  performance_insights_kms_key_id        = lookup(each.value, "performance_insights_kms_key_id", null)
  deletion_protection                    = lookup(each.value, "deletion_protection", true)
  skip_final_snapshot                    = lookup(each.value, "skip_final_snapshot", true)
  final_snapshot_identifier              = lookup(each.value, "final_snapshot_identifier", null)
  multi_az                               = lookup(each.value, "multi_az", false)
  port                                   = lookup(each.value, "port", 3306)
  copy_tags_to_snapshot                  = lookup(each.value, "copy_tags_to_snapshot", true)
  enabled_cloudwatch_logs_exports        = lookup(each.value, "enabled_cloudwatch_logs_exports", [])
  cloudwatch_log_group_export_kms_key_id = lookup(each.value, "cloudwatch_log_group_export_kms_key_id", "")
  cloudwatch_log_retention               = lookup(each.value, "cloudwatch_log_retention", 7)
  tags                                   = merge(local.config.tags, lookup(each.value, "tags", {}))
}

module "neptune" {
  for_each = local.config.neptune

  source                                      = "git::https://github.com/jaseel123/terraform-modules/neptunedb.git?ref=initial-version"
  cluster_name                                = "${terraform.workspace}-${each.key}"
  cluster_mode                                = lookup(each.value, "cluster_mode", "Serverless")
  cluster_subnets                             = lookup(each.value, "cluster_subnets", [])
  cluster_azs                                 = lookup(each.value, "cluster_azs", [])
  cluster_sgs                                 = lookup(each.value, "cluster_sgs", [])
  neptune_cluster_parameter_group_family      = lookup(each.value, "neptune_cluster_parameter_group_family", "")
  neptune_instance_parameter_group_family     = lookup(each.value, "neptune_instance_parameter_group_family", "")
  neptune_cluster_parameter_group_parameters  = lookup(each.value, "neptune_cluster_parameter_group_parameters", {})
  neptune_instance_parameter_group_parameters = lookup(each.value, "neptune_instance_parameter_group_parameters", {})
  cluster_engine                              = lookup(each.value, "cluster_engine", "neptune")
  cluster_engine_version                      = lookup(each.value, "cluster_engine_version", "")
  serverless_min_mem                          = lookup(each.value, "serverless_min_mem", "2.0")
  serverless_max_mem                          = lookup(each.value, "serverless_max_mem", "128.0")
  num_of_neptune_instances                    = lookup(each.value, "num_of_neptune_instances", null)
  cluster_instance_type                       = lookup(each.value, "cluster_instance_type", "")
  cluster_port                                = lookup(each.value, "cluster_port", null)
  cluster_iam_roles                           = lookup(each.value, "cluster_iam_roles", [])
  iam_database_authentication_enabled         = lookup(each.value, "iam_database_authentication_enabled", false)
  publicly_accessible                         = lookup(each.value, "publicly_accessible", false)
  backup_retention_period                     = lookup(each.value, "backup_retention_period", 7)
  preferred_backup_window                     = lookup(each.value, "preferred_backup_window", "04:00-05:00")
  snapshot_identifier                         = lookup(each.value, "snapshot_identifier", null)
  final_snapshot_identifier                   = lookup(each.value, "final_snapshot_identifier", null)
  skip_final_snapshot                         = lookup(each.value, "skip_final_snapshot", true)
  storage_encrypted                           = lookup(each.value, "storage_encrypted", true)
  kms_key                                     = lookup(each.value, "kms_key", "")
  enable_cloudwatch_logs_exports              = lookup(each.value, "enable_cloudwatch_logs_exports", [])
  allow_major_version_upgrade                 = lookup(each.value, "allow_major_version_upgrade", false)
  auto_minor_version_upgrade                  = lookup(each.value, "auto_minor_version_upgrade", false)
  preferred_maintenance_window                = lookup(each.value, "maintenance_window", "wed:21:00-wed:22:00")
  apply_immediately                           = lookup(each.value, "apply_immediately", false)
  deletion_protection                         = lookup(each.value, "deletion_protection", true)
  tags                                        = merge(local.config.tags, lookup(each.value, "tags", {}))
}

module "opensearch" {
  for_each = local.config.opensearch

  source                                  = "git::https://github.com/jaseel123/terraform-modules/opensearch.git?ref=main"
  vault_path                              = lookup(each.value, "vault_path", null)
  domain_name                             = lookup(each.value, "domain_name", "${terraform.workspace}-${each.key}")
  advanced_options                        = lookup(each.value, "advanced_options", {})
  advanced_security_options               = lookup(each.value, "advanced_security_options", {})
  auto_tune_options                       = lookup(each.value, "auto_tune_options", {})
  cluster_config                          = lookup(each.value, "cluster_config", {})
  domain_endpoint_options                 = lookup(each.value, "domain_endpoint_options", {})
  ebs_options                             = lookup(each.value, "ebs_options", {})
  encrypt_at_rest                         = lookup(each.value, "encrypt_at_rest", {})
  engine_version                          = lookup(each.value, "engine_version", null)
  log_publishing_options                  = lookup(each.value, "log_publishing_options", [])
  off_peak_window_options                 = lookup(each.value, "off_peak_window_options", {})
  vpc_options                             = lookup(each.value, "vpc_options", {})
  vpc_endpoints                           = lookup(each.value, "vpc_endpoints", {})
  access_policies                         = lookup(each.value, "access_policies", null)
  create_saml_options                     = lookup(each.value, "create_saml_options", false)
  saml_options                            = lookup(each.value, "saml_options", {})
  outbound_connections                    = lookup(each.value, "outbound_connections", {})
  create_cloudwatch_log_groups            = lookup(each.value, "create_cloudwatch_log_groups", true)
  create_cloudwatch_log_resource_policy   = lookup(each.value, "create_cloudwatch_log_resource_policy", true)
  cloudwatch_log_resource_policy_name     = lookup(each.value, "cloudwatch_log_resource_policy_name", null)
  access_policy_source_policy_documents   = lookup(each.value, "access_policy_source_policy_documents", [])
  access_policy_override_policy_documents = lookup(each.value, "access_policy_override_policy_documents", [])
  access_policy_statements                = lookup(each.value, "access_policy_statements", {})
  tags                                    = merge(local.config.tags, lookup(each.value, "tags", {}))
}

module "amazonmq" {
  for_each = local.config.amazonmq

  source                              = "git::https://github.com/jaseel123/terraform-modules/amazon-mq.git?ref=main"
  broker_name                         = lookup(each.value, "broker_name", "${terraform.workspace}-${each.key}")
  engine_type                         = lookup(each.value, "engine_type", null)
  engine_version                      = lookup(each.value, "engine_version", null)
  host_instance_type                  = lookup(each.value, "host_instance_type", null)
  mq_users                            = lookup(each.value, "mq_users", [])
  vault_path                          = lookup(each.value, "vault_path", null)
  apply_immediately                   = lookup(each.value, "apply_immediately", false)
  auto_minor_version_upgrade          = lookup(each.value, "auto_minor_version_upgrade", true)
  data_replication_mode               = lookup(each.value, "data_replication_mode", "NONE")
  data_replication_primary_broker_arn = lookup(each.value, "data_replication_primary_broker_arn", null)
  deployment_mode                     = lookup(each.value, "deployment_mode", "SINGLE_INSTANCE")
  kms_key_id                          = lookup(each.value, "kms_key_id", "")
  audit_log_enabled                   = lookup(each.value, "audit_log_enabled", false)
  general_log_enabled                 = lookup(each.value, "general_log_enabled", false)
  maintenance_window                  = lookup(each.value, "maintenance_window", null)
  publicly_accessible                 = lookup(each.value, "publicly_accessible", false)
  security_groups                     = lookup(each.value, "security_groups", [])
  subnet_ids                          = lookup(each.value, "subnet_ids", [])
  configuration_data                  = lookup(each.value, "configuration_data", null)
  tags                                = merge(local.config.tags, lookup(each.value, "tags", {}))
}
